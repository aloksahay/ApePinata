"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./context/WalletContext.tsx":
/*!***********************************!*\
  !*** ./context/WalletContext.tsx ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalletProvider: function() { return /* binding */ WalletProvider; },\n/* harmony export */   useWallet: function() { return /* binding */ useWallet; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"./node_modules/viem/_esm/index.js\");\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n// Define ApeChain\nconst apeChain = {\n    id: 33139,\n    name: \"ApeChain\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"APE\",\n        symbol: \"APE\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.apechain.com\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.apechain.com\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"ApeScan\",\n            url: \"https://apescan.io\"\n        }\n    }\n};\nconst CONTRACT_ADDRESS = \"0xF32c31415CCE1759f363aC1371b068AC691B2A39\";\nconst ABI = [\n    {\n        \"inputs\": [],\n        \"name\": \"currentTarget\",\n        \"outputs\": [\n            {\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    }\n];\n// Add new contract address\nconst APEBOMB_ADDRESS = \"0xC1932844eDcc3193ae2622089c4B57ae5F023D7f\";\nconst APEPINATA_ADDRESS = \"0xF32c31415CCE1759f363aC1371b068AC691B2A39\";\nconst WalletContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({});\nfunction WalletProvider(param) {\n    let { children } = param;\n    _s();\n    const [address, setAddress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [balance, setBalance] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [balanceNumber, setBalanceNumber] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [target, setTarget] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [txHash, setTxHash] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [transactionHistory, setTransactionHistory] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [apeBombPot, setApeBombPot] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"0\");\n    const [apeBombTotal, setApeBombTotal] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"0\");\n    const [apePinataTotal, setApePinataTotal] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"0\");\n    const publicClient = (0,viem__WEBPACK_IMPORTED_MODULE_2__.createPublicClient)({\n        chain: apeChain,\n        transport: (0,viem__WEBPACK_IMPORTED_MODULE_2__.http)()\n    });\n    const fetchTarget = async ()=>{\n        try {\n            console.log(\"Fetching target from contract:\", CONTRACT_ADDRESS);\n            const currentTarget = await publicClient.readContract({\n                address: CONTRACT_ADDRESS,\n                abi: ABI,\n                functionName: \"currentTarget\"\n            });\n            console.log(\"Target value:\", currentTarget);\n            setTarget(Number(currentTarget));\n        } catch (error) {\n            console.error(\"Detailed error fetching target:\", error);\n            setTarget(100) // Fallback to 100 if fetch fails\n            ;\n        }\n    };\n    // Add a recheck of target every 30 seconds\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        fetchTarget();\n        const interval = setInterval(fetchTarget, 30000);\n        return ()=>clearInterval(interval);\n    }, []);\n    const updateBalance = async (address)=>{\n        const balance = await publicClient.getBalance({\n            address: address\n        });\n        const balanceInApe = Number(balance) / 1e18;\n        setBalanceNumber(balanceInApe);\n        setBalance(balanceInApe.toFixed(1));\n    };\n    const connectWallet = async ()=>{\n        if (typeof window.ethereum === \"undefined\") {\n            alert(\"Please install MetaMask!\");\n            return;\n        }\n        const walletClient = (0,viem__WEBPACK_IMPORTED_MODULE_2__.createWalletClient)({\n            chain: apeChain,\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_2__.custom)(window.ethereum)\n        });\n        try {\n            // Request chain switch\n            await window.ethereum.request({\n                method: \"wallet_addEthereumChain\",\n                params: [\n                    {\n                        chainId: \"0x\".concat(apeChain.id.toString(16)),\n                        chainName: apeChain.name,\n                        nativeCurrency: apeChain.nativeCurrency,\n                        rpcUrls: [\n                            apeChain.rpcUrls.default.http[0]\n                        ],\n                        blockExplorerUrls: [\n                            apeChain.blockExplorers.default.url\n                        ]\n                    }\n                ]\n            });\n            const [address] = await walletClient.requestAddresses();\n            setAddress(address);\n            await updateBalance(address);\n        } catch (error) {\n            console.error(\"Failed to connect:\", error);\n            alert(\"Failed to connect to ApeChain. Please try again.\");\n        }\n    };\n    const sendEth = async (amount)=>{\n        if (!address) {\n            alert(\"Please connect your wallet first!\");\n            return;\n        }\n        const walletClient = (0,viem__WEBPACK_IMPORTED_MODULE_2__.createWalletClient)({\n            chain: apeChain,\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_2__.custom)(window.ethereum)\n        });\n        try {\n            const hash = await walletClient.sendTransaction({\n                account: address,\n                to: \"0x0000000000000000000000000000000000000000\",\n                value: BigInt(amount * 10 ** 18) // Convert APE amount to wei\n            });\n            setTxHash(hash);\n            console.log(\"Transaction hash:\", hash);\n            // Show transaction link\n            const txUrl = \"\".concat(apeChain.blockExplorers.default.url, \"/tx/\").concat(hash);\n            alert(\"Transaction sent! View on ApeScan: \".concat(txUrl));\n            // Update balance after transaction\n            await updateBalance(address);\n        } catch (error) {\n            console.error(\"Error sending transaction:\", error);\n            alert(\"Error sending transaction\");\n        }\n    };\n    const fetchHistory = async ()=>{\n        if (!address) return;\n        try {\n            const logs = await publicClient.getLogs({\n                address: [\n                    APEBOMB_ADDRESS,\n                    APEPINATA_ADDRESS\n                ],\n                fromBlock: BigInt(0),\n                toBlock: \"latest\"\n            });\n            const history = await Promise.all(logs.map(async (log)=>{\n                const block = await publicClient.getBlock({\n                    blockHash: log.blockHash\n                });\n                return {\n                    hash: log.transactionHash,\n                    amount: Number((0,viem__WEBPACK_IMPORTED_MODULE_2__.formatUnits)(BigInt(log.data), 18)),\n                    timestamp: Number(block.timestamp)\n                };\n            }));\n            setTransactionHistory(history.sort((a, b)=>b.timestamp - a.timestamp));\n        } catch (error) {\n            console.error(\"Error fetching history:\", error);\n        }\n    };\n    // Fetch history when address changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (address) {\n            fetchHistory();\n        }\n    }, [\n        address\n    ]);\n    const sendApeBomb = async (amount)=>{\n        if (!address) {\n            alert(\"Please connect your wallet first!\");\n            return;\n        }\n        const walletClient = (0,viem__WEBPACK_IMPORTED_MODULE_2__.createWalletClient)({\n            chain: apeChain,\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_2__.custom)(window.ethereum)\n        });\n        try {\n            const hash = await walletClient.sendTransaction({\n                account: address,\n                to: APEBOMB_ADDRESS,\n                value: BigInt(amount * 10 ** 18)\n            });\n            setTxHash(hash);\n            const txUrl = \"\".concat(apeChain.blockExplorers.default.url, \"/tx/\").concat(hash);\n            alert(\"Transaction sent! View on ApeScan: \".concat(txUrl));\n            // Wait for transaction to be mined\n            await publicClient.waitForTransactionReceipt({\n                hash\n            });\n            // Refresh all data\n            await updateBalance(address);\n            await fetchApeBombPot();\n            await fetchTotals();\n            await fetchHistory();\n        } catch (error) {\n            console.error(\"Error sending transaction:\", error);\n            alert(\"Error sending transaction\");\n        }\n    };\n    const sendApePinata = async (amount)=>{\n        if (!address) {\n            alert(\"Please connect your wallet first!\");\n            return;\n        }\n        const walletClient = (0,viem__WEBPACK_IMPORTED_MODULE_2__.createWalletClient)({\n            chain: apeChain,\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_2__.custom)(window.ethereum)\n        });\n        try {\n            const hash = await walletClient.sendTransaction({\n                account: address,\n                to: APEPINATA_ADDRESS,\n                value: BigInt(amount * 10 ** 18)\n            });\n            setTxHash(hash);\n            const txUrl = \"\".concat(apeChain.blockExplorers.default.url, \"/tx/\").concat(hash);\n            alert(\"Transaction sent! View on ApeScan: \".concat(txUrl));\n            // Wait for transaction to be mined\n            await publicClient.waitForTransactionReceipt({\n                hash\n            });\n            // Refresh all data\n            await updateBalance(address);\n            await fetchApeBombPot();\n            await fetchTotals();\n            await fetchHistory();\n        } catch (error) {\n            console.error(\"Error sending transaction:\", error);\n            alert(\"Error sending transaction\");\n        }\n    };\n    const fetchApeBombPot = async ()=>{\n        try {\n            const balance = await publicClient.getBalance({\n                address: APEBOMB_ADDRESS\n            });\n            setApeBombPot((Number(balance) / 1e18).toFixed(1));\n        } catch (error) {\n            console.error(\"Error fetching ApeBomb pot:\", error);\n        }\n    };\n    // Fetch pot size every 30 seconds\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        fetchApeBombPot();\n        const interval = setInterval(fetchApeBombPot, 30000);\n        return ()=>clearInterval(interval);\n    }, []);\n    const fetchTotals = async ()=>{\n        if (!address) return;\n        try {\n            // Fetch ApeBomb total\n            const bombTransactions = await publicClient.getTransactions({\n                address: address,\n                to: APEBOMB_ADDRESS\n            });\n            const bombTotal = bombTransactions.reduce((acc, tx)=>acc + Number((0,viem__WEBPACK_IMPORTED_MODULE_2__.formatUnits)(tx.value || BigInt(0), 18)), 0);\n            setApeBombTotal(bombTotal.toFixed(1));\n            // Fetch ApePinata total\n            const pinataTransactions = await publicClient.getTransactions({\n                address: address,\n                to: APEPINATA_ADDRESS\n            });\n            const pinataTotal = pinataTransactions.reduce((acc, tx)=>acc + Number((0,viem__WEBPACK_IMPORTED_MODULE_2__.formatUnits)(tx.value || BigInt(0), 18)), 0);\n            setApePinataTotal(pinataTotal.toFixed(1));\n        } catch (error) {\n            console.error(\"Error fetching totals:\", error);\n        }\n    };\n    // Add to useEffect for address changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (address) {\n            fetchHistory();\n            fetchTotals();\n        }\n    }, [\n        address\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(WalletContext.Provider, {\n        value: {\n            address,\n            balance,\n            balanceNumber,\n            target,\n            connectWallet,\n            sendEth,\n            txHash,\n            transactionHistory,\n            fetchHistory,\n            sendApeBomb,\n            sendApePinata,\n            apeBombPot,\n            apeBombTotal,\n            apePinataTotal\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/alok/Projects/ApePinata/context/WalletContext.tsx\",\n        lineNumber: 342,\n        columnNumber: 5\n    }, this);\n}\n_s(WalletProvider, \"MV1Cc49FXmv2epFswy1ILuOZSq4=\");\n_c = WalletProvider;\nconst useWallet = ()=>{\n    _s1();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(WalletContext);\n};\n_s1(useWallet, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./context/WalletContext.tsx\n"));

/***/ })

});